public Language(File fileName) {
		try {
			Scanner scanner = new Scanner(fileName);
			
			name = scanner.nextLine().split(" ")[1];
			fileExtension = scanner.nextLine().split(" ")[1];
			ArrayList<HighlightRule> rulesArrayList = new ArrayList<HighlightRule>();
			
			while (scanner.hasNextLine()) {
				String line = scanner.nextLine();
				if (line.split(" ")[0].equals("BLOCKDESIGNATOR")) {
					blockDesignator = line.replaceAll("BLOCKDESIGNATOR ", "");
				}
				else if (line.split(" ")[0].equals("HIGHLIGHTRULE")) {
					String ruleName = scanner.nextLine().replaceAll("name=", "");
					
					
					String regexDefinition = scanner.nextLine().replaceAll("regexDefinition=", "");
					
					String colorString = scanner.nextLine().replaceAll("color=", "");
					Color color = new Color(2,4,8);
					if (colorString.matches("\\((\\d)*,(\\d)*,(\\d)\\),")) {
						//RGB notation
						colorString = colorString.replaceAll("\\(|\\)", "");
						String[] colorArray = colorString.split(",");
						color = new Color(Integer.parseInt(colorArray[0]), Integer.parseInt(colorArray[1]), Integer.parseInt(colorArray[2]));
					}
					else if (colorString.matches("#([0-9]|[a-f]){6},")) { //need to actually test that this works
						//hex notation
						color = new Color(Integer.valueOf(colorString.substring(1, 3), 16), Integer.valueOf( colorString.substring(3, 5), 16), Integer.valueOf( colorString.substring(5, 7), 16));
					}
					
					rulesArrayList.add(new HighlightRule(ruleName, new String[] {regexDefinition}, color, false));
				}
				else if (line.split(" ")[0].equals("INSERTABLECODE")) {
					
				}
			}
			
			scanner.close();
			
			HighlightRule[] arrayedRules = new HighlightRule[rulesArrayList.size()];
			for (int i=0; i<rulesArrayList.size(); i++) {
				arrayedRules[i] = rulesArrayList.get(i);
			}
			rules = arrayedRules;
		}
		catch (Exception e) {
			System.out.println(e);
		}
	}